# p23~28 리스트, 튜플, 딕셔너리 

# 리스트
'''
리스트는 순서가 있는 자료의 집합(collection)이라고 볼 수 있다. (다른 언어에서 보통 배열(array)이라고 하는 것과 유사하지만,
리스트의 기능이 조금 더 풍부하다.)
'''

integer_list = [1,2,3]
heterorgenous_list = ["string", 0.1, True]
list_of_lists = [integer_list, heterorgenous_list,[]]

list_length = len(integer_list)     # 결과는 3
list_sum = sum(integer_list)        # 결과는 6

print(list_length,list_sum )

'''
대괄호를 사용해 리스트의 n번째 값을 불러오거나 설정할 수 있다.
'''
x = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
zero = x[0]         # 결과는 0, 리스트의 index 순서는 0부터 시작
nine = x[-1]        # 결과는 9, 리스트의 마지막 항목을 불러옴
eight = x[-2]       # 결과는 8, 리스트의 항목중 뒤에서 두 번째 항목을 불러옴
x[0] = -1           # x = [-1, 1, 2, 3, 4, 5, 6, 7, 8, 9]

'''
또한 리스트는 대괄호를 이용하여 슬라이싱할 수도 있다. i:j는 리스트를 i번째 값부터 j-1번째 값까지 분리하라는 의미이다.
만약 i를 따로 명시해주지 않는다면 리스트의 첫 번째 값부터 나눈다는 것을 의미한다. 반면 j를 명시해주지 않는다면 리스트의
마지막 값까지 나눈다는 것을 의미한다.
'''
first_three = x[:3]                     #[-1, 1, 2]
three_to_end = x[3:]                    #[3, 4, 5, 6, 7, 8, 9]
one_to_four = x[1:5]                    #[ 1, 2, 3, 4]
last_three = x[-3:]                     #[7, 8, 9]
without_first_and_last = x[1:-1]        #[1, 2, 3, 4, 5, 6, 7, 8]
copy_of_x = x[:]                        #[-1, 1, 2, 3, 4, 5, 6, 7, 8, 9]

'''
동일한 방식으로 리스트뿐 아니라 문자열 같은 순차형(sequen-tial) 변수를 나눌 수 있다.
또한 간격(stride)을 설정하여 리스트를 분리할 수도 있다. 참고로 간격은 음수로도 설정할 수 있다.
'''

every_third = x[::3]            # [-1, 3, 6, 9]
five_to_three = x[5:2:-1]       # [5, 4, 3]

'''
파이썬에서 제공하는 in 연산자를 사용하면 리스트 안에서 항모의 존재 여부를 확인할 수 있다.
이 방법은 리스트의 항목을 하나씩 모두 확인해 보기 때문에 리스트의 크기가 작을 때만(혹은 확인하는 데 걸리는 시간이 
상관없다면) 사용하도록 하자.
'''

1 in [1, 2, 3]      # True  (참)
0 in [1, 2, 3]      # False (거짓)

'''
주어진 리스트에 다른 리스트를 추가 해주기
'''
x = [1, 2, 3]
x.extend([4,5,6])       # x는 이제 [1, 2, 3, 4, 5, 6]
x = [1, 2, 3]
y = x + [1, 2, 3]       # y는 이제 [1, 2, 3, 4, 5, 6] x는 변하지 않음

'''
주로 리스트에 항목을 하나씩 추가하는 경우가 많은데 한번 보자
'''
x = [1, 2, 3]
x.append(0)             # x는 이제 [1, 2, 3, 0]
y = x[-1]               # y = 0
z = len(x)              # z = 4

# 만약 리스트 안에 몇 개의 항목이 존재하는지 알고 있다면 손쉽게 리스트를 풀 수 있다.
x, y = [1, 2]           # x=1, y=2 // 하지만 양쪽 항목의 개수가 다르다면 ValueError가 발생
_, y = [1, 2]           # y==2이고 첫 번째 항목은 신경쓰지 않는다.
