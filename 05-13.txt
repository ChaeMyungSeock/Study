batch_size의 default값이 32이다. 데이터 갯수보다 크다면 데이터 Max갯수만큼 잡힘

model = Sequential() => Sequential() 클래스를 모델로 대체해서 사용
model.add(Dense(1))  => Sequential() 안에 있는 add라는 기능을 사용해서 layers 클래스 안에 Dense라는 클래스를 추가

model.compile => Sequential() 안에 compile를 사용 컴퓨터가 알아먹을 수 있게

model.fit => fit -> 피트니스센터, 훈련

model.fit(x_train,y_train, epochs=100, batch_size=1,validation_data=(x_train,y_train))
=> 데이터는 x_train과 y_train을 사용하겠다. epochs => 전체 훈련량 100번

model.add(Dense(1000000))
model.add(Dense(1000000))
=> CPU에서는 안돌아감   //GPU에서는 메모리 + CORE가 많은게 좋음

* 단축키
shift + del 한줄 삭제

#회기방식 
MSE => 평균제곱 오차, // 이걸 쓰는 이유는 실제 측정값과 예측값의 차이를 설명할 수 없다. 예측값은 예측가능하나
실제 측정값이  거기에 있는 이유를 설명할 순 없다. 이는 이 설명이 불가능한 영역을 오차로 계산하게 된다 
1/n∑(실제 값 - 예측 값)^2  => 제곱하는 이유는 오차가 상황에 따라 양수 혹은 음수가 되기 때문에 제곱하여 합을 구함
하지만 그렇게 되면 값이 너무 커지기 때문에 정말 오차가 크다고 생각하는 오류를 범함 따라서 자유도로 나눔으로써 
평균값을 구할 수 있게 됨



#분류방식 => matrics=[ 'acc' ]
0, 1 
결과값에 대한 분류가 정해져 있어야 함 ex) 남자, 여자 // 강아지, 고양이 // 자동차, 오토바이


